{"version":3,"file":"popup.b982cbda8f5ad74ce3ea.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAFA;AAMA;AACA;AACA;AACA;AADA;AAFA;AAVA;AAkBA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;;;AACA;AAEA;;AACA;;AAGA;AACA;;AAGA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;;AATA;AADA;AAeA;;AACA;;AACA;;AAEA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;;AACA;AACA;AAEA;AAEA;AACA;AACA;;;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AATA;AADA;AAcA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AADA;AAGA;AAGA;;AAGA;AACA;AAGA;;AApJA;;;;;;;;;;AAVA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;;;;;;;;;;;;;;;;ACnBA","sources":["webpack://chrome-extension-boilerplate-react/./src/pages/Popup/modules/Polygon.js","webpack://chrome-extension-boilerplate-react/webpack/runtime/getFullHash"],"sourcesContent":["import * as bip39 from '@scure/bip39';\nimport { wordlist } from \"@scure/bip39/wordlists/english\";\nimport { use, POSClient } from \"@maticnetwork/maticjs\";\nimport { Web3ClientPlugin} from \"@maticnetwork/maticjs-web3\";\nimport HDWalletProvider from \"@truffle/hdwallet-provider\";\nimport * as axios from 'axios';\nimport * as decode from 'web3-eth-abi';\n\n\nconst privateKey=\"9cf3e34444a91a01307eb7a50210aa8a3faacb8dcbfb3435d2acbca9765f4460\"\nconst TESTNET_RPC=\"https://polygon-mumbai.g.alchemy.com/v2/zhG4gMMMoaqP7hmMQ52Y5KqunBN4ylUE\"\nconst endPoint = \"https://api-testnet.polygonscan.com/api\";\nconst testAddress = \"0xC17Ff54A781D0959C56dFe1fA2fC3613715470cb\";\nconst myApikey = 'zhG4gMMMoaqP7hmMQ52Y5KqunBN4ylUE'\nconst _tokenAddress = \"0x695D3B70310AD28320d375D95d9458630DbB6E15\";\nconst _testNftAddress = \"0xfbfed9cfbca305481bb9fcd42959a2baac198bd9\";\n\nuse(Web3ClientPlugin)\nconst matic = new POSClient();\nexport class Polygon{\n    \n    /*\n    * 잔액조회\n    */\n    static async getTokenBalances(){\n\n        await matic.init({\n            // log: true,\n            network: 'testnet',\n            version: 'mumbai',\n            parent: {\n                provider: new HDWalletProvider(privateKey, TESTNET_RPC),\n                defaultConfig: {\n                    from : testAddress\n                }\n            },\n            child: {\n              provider: new HDWalletProvider(privateKey, TESTNET_RPC),\n              defaultConfig: {\n                    from: testAddress\n              }\n            }\n        });\n        \n        const erc20Token = matic.erc20(_tokenAddress);\n        console.log(\"erc20Token : \" + erc20Token);\n\n        const balance = await erc20Token.getBalance(testAddress);\n        console.log(\"balance : \"+balance);\n\n        return balance\n\n    }\n    /*\n    *송금\n    */\n    static async sendDWT(){\n\n        const erc20Token = matic.erc20(_tokenAddress);//token instance 생성\n        console.log(\"erc20Token : \" + erc20Token);\n\n        //test를 위한 데이터\n        const testToAddress = \"0xE08ca9ab888f39E5c63b194aeDe313B09A35A6Dd\";\n        const testAmount = 10;\n\n        //parameter (to, amount)\n        const result = await erc20Token.transfer(testAmount, testToAddress);\n        console.log(\"result : \" + result);\n\n        const txHash = await result.getTransactionHash();\n        console.log(\"txHash : \" + txHash);\n\n        const txReceipt = await result.getReceipt();\n        console.log(\"txReceipt : \" + txReceipt);\n\n    }\n\n    /*\n    *거래내역\n    */\n    static async getTransactionHistory(){\n\n        const url = \"https://api-testnet.polygonscan.com/api\";\n        const result = await axios.get(url,{\n            params:{\n                module: 'account',\n                action: 'txlist',\n                address: testAddress,\n                startblock: 0,\n                endblock: 99999999,\n                page: 1,\n                offset: 50,//조회건수\n                sort: 'desc',//조회순서\n                apikey: myApikey//endpoint api key\n            }\n        })\n        \n\n        const resultSize = result.data.result.length;//해당 주소로 조회한 모든 블록 거래내역\n        const funcName = '0xa9059cbb';//encode된 함수명\n        let list = [];//decode된 거래내역만 리턴해줄 리스트\n\n        for(let i=0; i<resultSize; i++){\n            if(result.data.result[i].input.slice(0,10) === funcName){//트랜스퍼 함수명만 조회해서 데이터를 뽑아냄\n                const encodeData = result.data.result[i].input.slice(10);\n                console.log(\"encodeData : \"+encodeData);    \n        \n                const inputData = decode.decodeParameters(['address', 'uint256'],encodeData);\n                console.log(`${i}번째 inputData : ${JSON.stringify(inputData)}`);\n            \n                list.push({\n                    transaction_digest: result.data.result[i].blockHash,\n                    transaction_type: \"Transfer\",\n                    transaction_flag: \"Send\",\n                    recipient: inputData[0],\n                    total_amount: inputData[1],\n                    total_gas_fee: result.data.result[i].gasPrice,\n                    timestamp: result.data.result[i].timestamp,\n                })\n            }\n        }\n        console.log(\"End of Loop\");\n        return list;\n      \n    }\n\n    /*\n    * 소유한 NFT 리스트 \n    */\n    static async getMyOwnNFTS(){\n        \n                     \n        const url = \"https://api-testnet.polygonscan.com/api\";\n        const result = await axios.get(url,{\n            params:{\n\n                module: 'account',\n                action: 'tokennfttx',\n                contractaddress: _testNftAddress,\n                address: testAddress,\n                page: 1,\n                offset: 100,\n                sort: 'asc',\n                apikey: myApikey//endpoint api key\n            }\n        })\n\n        const resutOfSize = result.data.result.length;\n        const list = [];\n\n        for(let i=0; i<resutOfSize; i++){\n            \n            if(result.data.result[i].contractAddress === _testNftAddress){\n                console.log(`${i}번째 block object : ${result.data.result[i].blockHash}`)\n                list.push({\n                    object: result.data.result[i]\n                })\n            }\n\n\n        }\n\n\n        console.log(\"result : \" + result);\n        return result;\n\n\n    }\n\n}\n","__webpack_require__.h = () => (\"b405c161c84e5ad7f7fc\")"],"names":[],"sourceRoot":""}